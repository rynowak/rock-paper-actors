@page "/play"
@inject GameStateService GameStateService
@inject NavigationManager Navigation
@implements IDisposable
@attribute [Authorize]

<h1>Rock-Paper-Actors</h1>

@if (move is null)
{
    <p>Make your move...</p>
    <div class="game">
        <MoveButton Shape="Shape.Rock" OnClick="@(() => MakeMove(Shape.Rock))" />
        <MoveButton Shape="Shape.Paper" OnClick="@(() => MakeMove(Shape.Paper))" />
        <MoveButton Shape="Shape.Scissors" OnClick="@(() => MakeMove(Shape.Scissors))" />
    </div>
}
else if (move != null && opponentMove is null)
{
    <p>Waiting for opponent...</p>
    <div class="game">
        <MoveButton Shape="Shape.Rock" MoveClass="@(move == Shape.Rock ? "btn-primary" : "btn-secondary")" />
        <MoveButton Shape="Shape.Paper" MoveClass="@(move == Shape.Paper ? "btn-primary" : "btn-secondary")" />
        <MoveButton Shape="Shape.Scissors" MoveClass="@(move == Shape.Scissors ? "btn-primary" : "btn-secondary")" />
    </div>
}
else
{
    if (result.Outcome == GameOutcome.Draw)
    {
        <p>It's a draw!</p>
    }
    else if (result.Outcome == GameOutcome.Win)
    {
        <p>You win!</p>
    }
    else
    {
        <p>You lose.</p>
    }

    <p>Your Move</p>
    <div class="game">
        <MoveButton Shape="Shape.Rock" MoveClass="@(move == Shape.Rock ? moveClass : "btn-secondary")" />
        <MoveButton Shape="Shape.Paper" MoveClass="@(move == Shape.Paper ? moveClass : "btn-secondary")" />
        <MoveButton Shape="Shape.Scissors" MoveClass="@(move == Shape.Scissors ? moveClass : "btn-secondary")" />
    </div>

    <p>Opponent's Move</p>
    <div class="game">
        <MoveButton Shape="Shape.Rock" MoveClass="@(opponentMove == Shape.Rock ? opponentMoveClass : "btn-secondary")" />
        <MoveButton Shape="Shape.Paper" MoveClass="@(opponentMove == Shape.Paper ? opponentMoveClass : "btn-secondary")" />
        <MoveButton Shape="Shape.Scissors" MoveClass="@(opponentMove == Shape.Scissors ? opponentMoveClass : "btn-secondary")" />
    </div>

    <div>
      <a href="/" class="btn btn-primary btn-lg">Play Again</a>
    </div>
}

<hr />

<p class="small text-muted">GameId: @Game?.GameId</p>
<p class="small text-muted">Player: @Game?.Player?.Username</p>
<p class="small text-muted">Opponent: @Game?.Opponent?.Username</p>

@functions {
    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; }
    [CascadingParameter] GameInfo Game { get; set; }

    UserInfo user;
    CancellationTokenSource cts;
    Shape? move;
    Shape? opponentMove;
    string moveClass;
    string opponentMoveClass;
    GameResult result;

    protected override async Task OnInitializedAsync()
    {
        if (Game == null)
        {
            Navigation.NavigateTo("/");
        }

        var state = await AuthenticationState;
        user = new UserInfo() { Username = state.User.FindFirst(ClaimTypes.Name).Value, };
    }
    
    async Task MakeMove(Shape shape)
    {
        if (move is null)
        {
            cts = new CancellationTokenSource();
            move = shape;

            await Task.Delay(TimeSpan.FromMilliseconds(750));

            var completion = GameStateService.GetCompletedGameAsync(Game.GameId, cts.Token);
            var proxy = ActorProxy.Create<IHumanPlayerActor>(new ActorId(user.Username), "HumanPlayerActor");
            await proxy.PlayMoveAsync(shape);
            result = await completion;

            opponentMove = result.Moves[result.Info.Opponent.Username];
            moveClass = result.Outcome == GameOutcome.Draw ? "btn-warning" : result.Outcome == GameOutcome.Win ? "btn-success" : "btn-danger";
            opponentMoveClass = result.Outcome == GameOutcome.Draw ? "btn-warning" : result.Outcome == GameOutcome.Loss  ? "btn-success" : "btn-danger";
        }
    }

    void IDisposable.Dispose()
    {
        cts?.Cancel();
    }
}